# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'remark':
    'prefix': 'rem'
    'body': '/* $1 */'
  'use strict':
    'prefix': 'use'
    'body': "'use strict'"
  'console.log':
    'prefix': 'log'
    'body': 'console.log($1)$0'
  'console.error':
    'prefix': 'error'
    'body': 'console.error($1)$0'
  'path':
    'prefix': 'path'
    'body': "const path = require('path')"
  'fs':
    'prefix': 'fs'
    'body': "const fs = require('fs')"
  'typical':
    'prefix': 'typical'
    'body': "const t = require('typical')"
  'assert':
    'prefix': 'assert'
    'body': "var a = require('core-assert')"
  'hashbang':
    'prefix': 'hashbang'
    'body': '#!/usr/bin/env node'
  'ansi':
    'prefix': 'ansi'
    'body': "const ansi = require('ansi-escape-sequences')"
  'constructor':
    'prefix': 'constr'
    'body': 'constructor ($1) {\n\t$2\n}'
  'options default':
    'prefix': 'options'
    'body': 'options = options || {}'
  'test':
    'prefix': 'test'
    'body': "runner.test('$1', function () {\n  $2\n})"
  'inspect':
    'prefix': 'inspect'
    'body': "console.error(require('util').inspect($1, { depth: 6, colors: true }))"
  'new Promise':
    'prefix': 'prom'
    'body': 'new Promise((resolve, reject) => {\n\t$1\n})$0'
  'unhandledRejection':
    'prefix': 'unhand'
    'body': "process.on('unhandledRejection', (err, p) => console.error(err, p))"
  'module.exports':
    'prefix': 'mod'
    'body': 'module.exports = $1'
  'inherit':
    'prefix': 'inherit'
    'body': """
      $1.prototype = Object.create($2.prototype);
      $1.prototype.constructor = $1;
      """
  'process warnings':
    'prefix': 'prowarn'
    'body': """
      process.on('warning', warning => {
        console.warn(warning.name)
        console.warn(warning.message)
        console.warn(warning.stack)
      })
      """
  'universal module definition':
    'prefix': 'umd'
    'body': """
      (function (root, factory) {
        if (typeof define === 'function' && define.amd) {
          define(['b'], factory);
        } else if (typeof module === 'object' && module.exports) {
          module.exports = factory(require('b'));
        } else {
          root.returnExports = factory(root.b);
        }
      }(this, function (b) {
        return {};
      }));
      """
  'feature detection':
    'prefix': 'detect'
    'body': """
      var detect = require('feature-detect-es6')

      if (detect.all('class', 'arrowFunction', 'let', 'const')) {
        module.exports = require('./src/lib/$1')
      } else {
        module.exports = require('./es5/lib/$1')
      }
      """

'.text.html.mustache,.source.gfm':
  'js-standard':
    'prefix': 'sta'
    'body': '[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)'
  'gitter':
    'prefix': 'gitter'
    'body': '[![Join the chat at https://gitter.im/$1](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/$1?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)'
  'footer':
    'prefix': 'foo'
    'body': '* * *\n\n&copy; 2016 Lloyd Brookes \<75pound@gmail.com\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).'
  'coveralls':
    'prefix': 'cover'
    'body': '[![Coverage Status](https://coveralls.io/repos/github/$1/badge.svg?branch=master)](https://coveralls.io/github/$1?branch=master)'

'.text.html':
  'div':
    'prefix': 'div'
    'body': '<div$1>$2</div>'
  'p':
    'prefix': 'p'
    'body': '<p$1>$2</p>'
  'link':
    'prefix': 'link'
    'body': '<link rel="${1:stylesheet}" href="${2:/css/style.css}">'
  'style':
    'prefix': 'style'
    'body': '<style>\n  $1\n</style>'
  'script':
    'prefix': 'script'
    'body': '<script>\n  $1\n</script>'
  'Script With External Source':
    'prefix': 'scriptsrc'
    'body': '<script src="$1"></script>$0'
  'viewport':
    'prefix': 'viewport'
    'body': '<meta name="viewport" content="width=device-width, initial-scale=1">'

'.source.json':
  'es5':
    'prefix': 'es5'
    'body': '"es5": "rm -rf es5 && babel --presets babel-preset-es2015 --no-comments src --out-dir es5"'
  'coveralls':
    'prefix': 'cover'
    'body': '"cover": "istanbul cover ./node_modules/.bin/test-runner test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo"'
  'standard':
    'prefix': 'standard'
    'body': """
      "standard": {
        "ignore": [

        ]
      }
      """
